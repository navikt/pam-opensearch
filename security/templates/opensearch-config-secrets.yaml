apiVersion: v1
kind: Secret
metadata:
  name: {{ template "fullname" . }}-config
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "fullname" . }}
type: Opaque
stringData:
  opensearch.yml: |-
    plugins.security.disabled: "false"
    plugins.security.allow_unsafe_democertificates: "true"
    plugins.security.allow_default_init_securityindex: "true"
    plugins.security.audit.type: internal_opensearch
    plugins.security.enable_snapshot_restore_privilege: "true"
    plugins.security.check_snapshot_restore_write_privileges: "true"
    plugins.security.ssl.transport.pemcert_filepath: node.pem
    plugins.security.ssl.transport.pemkey_filepath: node-key.pem
    plugins.security.ssl.transport.pemtrustedcas_filepath: root-ca.pem
    plugins.security.ssl.transport.enforce_hostname_verification: "false"
    plugins.security.ssl.http.pemcert_filepath: node.pem
    plugins.security.ssl.http.pemkey_filepath: node-key.pem
    plugins.security.ssl.http.pemtrustedcas_filepath: root-ca.pem
    plugins.security.authcz.admin_dn:
      - "CN=ADMIN,O=NAV,L=OSLO,ST=OSLO,C=NO"
    plugins.security.nodes_dn:
      - "CN=NODE,O=NAV,L=OSLO,ST=OSLO,C=NO"
    plugins.security.restapi.roles_enabled: ["all_access", "security_rest_api_access"]
  roles.yml: |-
    _meta:
      type: "roles"
      config_version: 2
    kibana_read_only:
      reserved: true
    security_rest_api_access:
      reserved: true
    alerting_view_alerts:
      reserved: true
      index_permissions:
        - index_patterns:
            - ".opensearch-alerting-alert*"
          allowed_actions:
            - read
    alerting_crud_alerts:
      reserved: true
      index_permissions:
        - index_patterns:
            - ".opensearch-alerting-alert*"
          allowed_actions:
            - crud
    alerting_full_access:
      reserved: true
      index_permissions:
        - index_patterns:
            - ".opensearch-alerting-config"
            - ".opensearch-alerting-alert*"
          allowed_actions:
            - crud
  roles_mapping.yml: |-
    _meta:
      type: "rolesmapping"
      config_version: 2
    all_access:
      reserved: false
      backend_roles:
      - "admin"
      description: "Maps admin to all_access"
    own_index:
      reserved: false
      users:
      - "*"
      description: "Allow full access to an index named like the username"
    kibana_user:
      reserved: false
      backend_roles:
      - "kibanauser"
      description: "Maps opensearch-dashboarduser to opensearch-dashboard_user"
    readall:
      reserved: false
      backend_roles:
      - "readall"
    kibana_server:
      reserved: true
      users:
      - "kibanaserver"
  internal_users.yml: |-
    _meta:
      type: "internalusers"
      config_version: 2
    admin:
      hash: {{ .Values.opensearch.security.password.hash }}
      reserved: false
      backend_roles:
      - "admin"
      description: "admin user"
    kibanaserver:
      hash: {{ .Values.opensearch.security.password.hash }}
      reserved: false
      description: "opensearch-dashboardserver user"
    kibanaro:
      hash: {{ .Values.opensearch.security.password.hash }}
      reserved: false
      backend_roles:
      - "kibanauser"
      - "readall"
      attributes:
        attribute1: "value1"
        attribute2: "value2"
        attribute3: "value3"
      description: "opensearch-dashboardro user"
    readall:
      hash: {{ .Values.opensearch.security.password.hash }}
      reserved: false
      backend_roles:
      - "readall"
      description: "readall user"
  config.yml: |-
    _meta:
        type: "config"
        config_version: 2
    config:
      dynamic:
        http:
          anonymous_auth_enabled: false
          xff:
            enabled: false
            internalProxies: '192\.168\.0\.10|192\.168\.0\.11'
        authc:
          jwt_auth_domain:
            description: "Authenticate via Json Web Token"
            http_enabled: false
            transport_enabled: false
            order: 0
            http_authenticator:
              type: jwt
              challenge: false
              config:
                signing_key: "base64 encoded HMAC key or public RSA/ECDSA pem key"
                jwt_header: "Authorization"
                jwt_url_parameter: null
                roles_key: null
                subject_key: null
            authentication_backend:
              type: noop
          clientcert_auth_domain:
            description: "Authenticate via SSL client certificates"
            http_enabled: true
            transport_enabled: true
            order: 2
            http_authenticator:
              type: clientcert
              config:
                username_attribute: cn
              challenge: false
            authentication_backend:
              type: noop
          kerberos_auth_domain:
            http_enabled: false
            transport_enabled: false
            order: 6
            http_authenticator:
              type: kerberos
              challenge: true
              config:
                krb_debug: false
                strip_realm_from_principal: true
            authentication_backend:
              type: noop
          basic_internal_auth_domain:
            description: "Authenticate via HTTP Basic against internal users database"
            http_enabled: true
            transport_enabled: true
            order: 4
            http_authenticator:
              type: basic
              challenge: true
            authentication_backend:
              type: intern
          proxy_auth_domain:
            description: "Authenticate via proxy"
            http_enabled: false
            transport_enabled: false
            order: 3
            http_authenticator:
              type: proxy
              challenge: false
              config:
                user_header: "x-proxy-user"
                roles_header: "x-proxy-roles"
            authentication_backend:
              type: noop
          ldap:
            description: "Authenticate via LDAP or Active Directory"
            http_enabled: false
            transport_enabled: false
            order: 5
            http_authenticator:
              type: basic
              challenge: false
            authentication_backend:
              type: ldap
              config:
                enable_ssl: false
                enable_start_tls: false
                enable_ssl_client_auth: false
                verify_hostnames: true
                hosts:
                - localhost:8389
                bind_dn: null
                password: null
                userbase: 'ou=people,dc=example,dc=com'
                usersearch: '(sAMAccountName={0})'
                username_attribute: null
        authz:
          roles_from_myldap:
            description: "Authorize via LDAP or Active Directory"
            http_enabled: false
            transport_enabled: false
            authorization_backend:
              type: ldap
              config:
                enable_ssl: false
                enable_start_tls: false
                enable_ssl_client_auth: false
                verify_hostnames: true
                hosts:
                - localhost:8389
                bind_dn: null
                password: null
                rolebase: 'ou=groups,dc=example,dc=com'
                rolesearch: '(member={0})'
                userroleattribute: null
                userrolename: disabled
                rolename: cn
                resolve_nested_roles: true
                userbase: 'ou=people,dc=example,dc=com'
                usersearch: '(uid={0})'
          roles_from_another_ldap:
            description: "Authorize via another Active Directory"
            http_enabled: false
            transport_enabled: false
            authorization_backend:
              type: ldap
